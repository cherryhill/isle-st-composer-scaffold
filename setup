#!/usr/bin/env bash
# shellcheck shell=bash
set -e -o pipefail

# Function to find Python command
find_python() {
    if command -v python3 >/dev/null 2>&1; then
        echo "python3"
    elif command -v python >/dev/null 2>&1; then
        echo "python"
    else
        echo "Error: Neither python3 nor python is available."
        exit 1
    fi
}

# Get Python command
PYTHON_CMD=$(find_python)

# Path to composer.json
COMPOSER_JSON="drupal/rootfs/var/www/drupal/composer.json"

# Check if composer.json exists
if [ ! -f "$COMPOSER_JSON" ]; then
    echo "Error: $COMPOSER_JSON not found"
    exit 1
fi

# Create scripts directory
echo "Creating scripts directory"
mkdir -p drupal/rootfs/var/www/drupal/assets/scripts

# Create symbolic link
echo "Creating symbolic link to scripts directory"
ln -s drupal/rootfs/var/www/drupal/assets/scripts scripts

# Add the cherryhill/isle-st-composer-scaffold repository
echo "Adding repository: cherryhill/isle-st-composer-scaffold"
$PYTHON_CMD -c "
import json
import sys

try:
    with open('$COMPOSER_JSON', 'r') as f:
        data = json.load(f)

    # Check if repositories exist
    if 'repositories' not in data:
        data['repositories'] = []

    repo_url = 'https://github.com/cherryhill/isle-st-composer-scaffold'

    # Check if repository already exists
    for repo in data['repositories']:
        if repo.get('url') == repo_url:
            print('Repository already exists, skipping.')
            break
    else:
        # Add the repository
        data['repositories'].append({'type': 'github', 'url': repo_url})

        # Write back to file
        with open('$COMPOSER_JSON', 'w') as f:
            json.dump(data, f, indent=4)

        print('Added repository: cherryhill/isle-st-composer-scaffold')

except Exception as e:
    print(f'Error: {e}', file=sys.stderr)
    sys.exit(1)
"

# Add the post-update-cmd script
echo "Adding script: post-update-cmd"
$PYTHON_CMD -c "
import json
import sys

try:
    with open('$COMPOSER_JSON', 'r') as f:
        data = json.load(f)

    # Ensure scripts section exists
    if 'scripts' not in data:
        data['scripts'] = {}

    script_name = 'post-update-cmd'
    script_command = './vendor/cherryhill/isle-st-composer-scaffold/assemble'

    # Check if script exists
    if script_name in data['scripts']:
        existing_value = data['scripts'][script_name]

        # If it's a string and matches, do nothing
        if isinstance(existing_value, str) and existing_value == script_command:
            print('Script already exists with the same command, skipping.')
        # If it's a list, check if command exists
        elif isinstance(existing_value, list):
            if script_command in existing_value:
                print('Script already contains this command, skipping.')
            else:
                # Add to existing list
                existing_value.append(script_command)
                data['scripts'][script_name] = existing_value
                print('Added command to existing script.')
        else:
            # Convert string to list and add new command
            data['scripts'][script_name] = [existing_value, script_command]
            print('Added command to existing script.')
    else:
        # Script doesn't exist, add it
        data['scripts'][script_name] = script_command
        print('Added new script: post-update-cmd')

    # Write back to file
    with open('$COMPOSER_JSON', 'w') as f:
        json.dump(data, f, indent=4)

except Exception as e:
    print(f'Error: {e}', file=sys.stderr)
    sys.exit(1)
"

echo "Setup complete!"
