name: Build Production Site

on: [workflow_dispatch]

jobs:
  build:
    runs-on: self-hosted
    defaults:
      run:
        working-directory: /opt/isle
    steps:
      - run: echo "BRANCH=$(git branch | grep '[*]' | cut -d ' ' -f2)" >> $GITHUB_ENV
      - run: echo "COMMIT=$(git rev-parse HEAD | cut -c 1-8)" >> $GITHUB_ENV
      - name: Test for detached HEAD
        run: |
          if test -z "$(git symbolic-ref --short -q HEAD)"; then
            echo "ðŸš¨ ALERT: The repository is in a detached HEAD state. It must be on a branch to continue."
            exit 1
          fi
      # run git commands before the build script to self-update
      - run: git pull
      - run: echo "EXPORTFILE=/opt/isle/exports/$(date +%Y%m%dT%H%M%S)-$(echo "$BRANCH" | sed -e 's/[^A-Za-z0-9_-]/_/g')-$COMMIT" >> $GITHUB_ENV
        env:
          BRANCH: ${{ env.BRANCH }}
          COMMIT: ${{ env.COMMIT }}
      - name: Run script
        id: script
        run: |
          docker compose exec -T drupal-prod with-contenv bash -lc 'drush cache:rebuild'
          docker compose exec -T drupal-prod with-contenv bash -lc 'drush sql:dump --result-file=/tmp/db.sql --gzip --structure-tables-key=common'
          docker compose exec -T drupal-prod with-contenv bash -lc 'drush --yes config:export --destination=/tmp/config'
          docker compose cp drupal-prod:/tmp/db.sql.gz "$EXPORTFILE"-db.sql.gz
          docker compose cp drupal-prod:/tmp/config "$EXPORTFILE"-config
          git pull
          docker compose exec -T drupal-prod with-contenv bash -lc 'composer config github-oauth.github.com ${{ secrets.OAUTH_TOKEN }}'
          docker compose --profile prod build  # build runs `composer install`
          docker compose --profile prod down
          docker compose --profile prod up -d
          docker compose exec -T drupal-prod with-contenv bash -lc 'drush --yes updatedb'
          # There is an issue with the config import process where if a module
          # is installed and configuration entities are being created for that
          # module it may fail to create the config entities because of missing
          # dependencies. This is a cache issue and so we run config import
          # again if the first time it fails.
          docker compose exec -T drupal-prod with-contenv bash -lc 'drush --yes config:import || drush --yes config:import'
          # The first config import may include changes to the behavior of
          # config import, such as config ignore or config split. We must run
          # config import a second time to ensure those changes take effect.
          docker compose exec -T drupal-prod with-contenv bash -lc 'drush --yes config:import'
          docker compose exec -T drupal-prod with-contenv bash -lc 'drush cache:rebuild'
        env:
          EXPORTFILE: ${{ env.EXPORTFILE }}
          COMMIT: ${{ env.COMMIT }}
        continue-on-error: true
      - name: Save variable for rollback database
        if: steps.script.outcome == 'failure'
        run: echo "ROLLBACK_DB=$(find /opt/isle/exports -type f -name "*-$COMMIT-db.sql.gz")" >> $GITHUB_ENV
        env:
          COMMIT: ${{ env.COMMIT }}
      - name: Roll back site
        id: rollback
        if: steps.script.outcome == 'failure'
        # see https://www.drupal.org/docs/develop/git/common-development-workflow#s-how-to-perform-a-rollback
        run: |
          git switch "$BRANCH"
          if [ "$(git rev-parse HEAD | cut -c 1-8)" != "$COMMIT" ]; then
            git checkout "$COMMIT"
            echo "ðŸš¨ ALERT: The repository is now in a detached HEAD state."
          fi
          docker compose cp "$ROLLBACK_DB" drupal-prod:/tmp/db.sql.gz
          docker compose exec -T drupal-prod with-contenv bash -lc "gzip -df /tmp/db.sql.gz"
          docker compose exec -T drupal-prod with-contenv bash -lc 'drush --yes sql:drop'
          docker compose exec -T drupal-prod with-contenv bash -lc "drush sql:query --file=/tmp/db.sql"
        env:
          BRANCH: ${{ env.BRANCH }}
          COMMIT: ${{ env.COMMIT }}
          ROLLBACK_DB: ${{ env.ROLLBACK_DB }}
      - name: Conditionally fail the job
        if: steps.script.outcome == 'failure'
        run: exit 1
